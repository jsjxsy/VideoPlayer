package com.filemanager.lib.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_INFO".
*/
public class FileInfoDao extends AbstractDao<FileInfo, String> {

    public static final String TABLENAME = "FILE_INFO";

    /**
     * Properties of entity FileInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FileName = new Property(0, String.class, "fileName", true, "FILE_NAME");
        public final static Property FilePath = new Property(1, String.class, "filePath", false, "FILE_PATH");
        public final static Property FileSize = new Property(2, long.class, "fileSize", false, "FILE_SIZE");
        public final static Property IsDirectory = new Property(3, boolean.class, "isDirectory", false, "IS_DIRECTORY");
        public final static Property Suffix = new Property(4, String.class, "suffix", false, "SUFFIX");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property IsCheck = new Property(6, boolean.class, "isCheck", false, "IS_CHECK");
        public final static Property IsPhoto = new Property(7, boolean.class, "isPhoto", false, "IS_PHOTO");
    }


    public FileInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FileInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_INFO\" (" + //
                "\"FILE_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: fileName
                "\"FILE_PATH\" TEXT," + // 1: filePath
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 2: fileSize
                "\"IS_DIRECTORY\" INTEGER NOT NULL ," + // 3: isDirectory
                "\"SUFFIX\" TEXT," + // 4: suffix
                "\"TIME\" TEXT," + // 5: time
                "\"IS_CHECK\" INTEGER NOT NULL ," + // 6: isCheck
                "\"IS_PHOTO\" INTEGER NOT NULL );"); // 7: isPhoto
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileInfo entity) {
        stmt.clearBindings();
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(1, fileName);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
        stmt.bindLong(3, entity.getFileSize());
        stmt.bindLong(4, entity.getIsDirectory() ? 1L: 0L);
 
        String suffix = entity.getSuffix();
        if (suffix != null) {
            stmt.bindString(5, suffix);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
        stmt.bindLong(7, entity.getIsCheck() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsPhoto() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileInfo entity) {
        stmt.clearBindings();
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(1, fileName);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
        stmt.bindLong(3, entity.getFileSize());
        stmt.bindLong(4, entity.getIsDirectory() ? 1L: 0L);
 
        String suffix = entity.getSuffix();
        if (suffix != null) {
            stmt.bindString(5, suffix);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
        stmt.bindLong(7, entity.getIsCheck() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsPhoto() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FileInfo readEntity(Cursor cursor, int offset) {
        FileInfo entity = new FileInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fileName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filePath
            cursor.getLong(offset + 2), // fileSize
            cursor.getShort(offset + 3) != 0, // isDirectory
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // suffix
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.getShort(offset + 6) != 0, // isCheck
            cursor.getShort(offset + 7) != 0 // isPhoto
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileInfo entity, int offset) {
        entity.setFileName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFilePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFileSize(cursor.getLong(offset + 2));
        entity.setIsDirectory(cursor.getShort(offset + 3) != 0);
        entity.setSuffix(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsCheck(cursor.getShort(offset + 6) != 0);
        entity.setIsPhoto(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(FileInfo entity, long rowId) {
        return entity.getFileName();
    }
    
    @Override
    public String getKey(FileInfo entity) {
        if(entity != null) {
            return entity.getFileName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileInfo entity) {
        return entity.getFileName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
